<h1>About</h1>
<p><a href="https://40823241a.github.io/cp2023/content/index.html">個人網站</a></p>
<p><a href="https://github.com/40823241a/cp2023">個人倉儲</a></p>
<p></p>
<h1>IPV4與IPV6網路設定&amp;差異</h1>
<p>利用ChatGPT了解架構及相關資訊</p>
<h2>IPV4</h2>
<ol>
<li>
<p><span style="color: #000080;"><strong>確認網路需求：</strong></span></p>
<ul>
<li><span style="color: #000080;">決定你的網路架構，包括需要多少個主機和子網。</span></li>
</ul>
</li>
<li>
<p><span style="color: #000080;"><strong>配置IP地址：</strong></span></p>
<ul>
<li><span style="color: #000080;">每台裝置都需要一個唯一的IPv4地址。確保選擇的地址不與其他設備相衝突。</span></li>
<li><span style="color: #000080;">IPv4地址通常是由四個八位元組組成，例如：192.168.1.1。</span></li>
</ul>
</li>
<li>
<p><span style="color: #000080;"><strong>設定子網遮罩：</strong></span></p>
<ul>
<li><span style="color: #000080;">子網遮罩用於區分主機位址和網路位址。常見的子網遮罩包括255.255.255.0。</span></li>
<li><span style="color: #000080;">子網遮罩指定了IP地址的哪一部分用於網路，哪一部分用於主機。</span></li>
</ul>
</li>
<li>
<p><span style="color: #000080;"><strong>設定預設閘道：</strong></span></p>
<ul>
<li><span style="color: #000080;">預設閘道是指將資料包發送到目的地時使用的下一個節點，通常是你的路由器的IP地址。</span></li>
</ul>
</li>
<li>
<p><span style="color: #000080;"><strong>設定DNS伺服器：</strong></span></p>
<ul>
<li><span style="color: #000080;">DNS伺服器用於解析主機名稱到IP地址。你可以使用ISP提供的DNS伺服器，或使用其他公共DNS服務，如Google的8.8.8.8。</span></li>
</ul>
</li>
<li>
<p><span style="color: #000080;"><strong>進行設定：</strong></span></p>
<ul>
<li><span style="color: #000080;">在Windows中，你可以透過「控制台」 &gt; 「網路和共用中心」 &gt; 「變更介面卡設定」，選擇適當的網路介面卡，右鍵點選「內容」，然後在「Internet Protocol Version 4 (TCP/IPv4)」中輸入相應的資訊。</span></li>
<li><span style="color: #000080;">在Linux中，你可以編輯 <code>/etc/network/interfaces</code> 文件或使用 <code>ifconfig</code> 和 <code>route</code> 指令進行設定。</span></li>
<li><span style="color: #000080;">在macOS中，你可以使用「系統偏好設定」 &gt; 「網路」，選擇你的連接方式，點選「進階」進行IPv4設定。</span></li>
</ul>
</li>
<li>
<p><span style="color: #000080;"><strong>測試連接：</strong></span></p>
<ul>
<li><span style="color: #000080;">確保所有設定正確，通過 <code>ping</code> 指令或其他網路工具測試連接。</span></li>
</ul>
</li>
<li>
<p><span style="color: #000080;"><strong>監視和維護：</strong></span></p>
<ul>
<li><span style="color: #000080;">定期監視網路流量，確保沒有未授權的設備使用你的IP地址。</span></li>
<li><span style="color: #000080;">維護網路安全，定期更新防火牆設定並檢查日誌。</span></li>
</ul>
</li>
</ol>
<p><img alt="" height="24" src="/images/ipv4.png" width="200"/></p>
<h2>IPV6</h2>
<ol>
<li>
<p><span style="color: #000080;"><strong>確認網路需求：</strong></span></p>
<ul>
<li><span style="color: #000080;">像IPv4一樣，確定你的網路架構，包括需要多少個主機和子網。</span></li>
</ul>
</li>
<li>
<p><span style="color: #000080;"><strong>配置IPv6地址：</strong></span></p>
<ul>
<li><span style="color: #000080;">IPv6地址通常由八個四位數字組成，例如：2001:0db8:85a3:0000:0000:8a2e:0370:7334。</span></li>
<li><span style="color: #000080;">確保每個設備都有唯一的IPv6地址，可以手動分配或使用IPv6自動配置。</span></li>
</ul>
</li>
<li>
<p><span style="color: #000080;"><strong>設定子網遮罩：</strong></span></p>
<ul>
<li><span style="color: #000080;">IPv6的子網遮罩稱為「前綴」，通常由網路提供商提供。例如，<code>2001:0db8:85a3::/64</code>。</span></li>
</ul>
</li>
<li>
<p><span style="color: #000080;"><strong>設定預設閘道：</strong></span></p>
<ul>
<li><span style="color: #000080;">設定IPv6的預設閘道，通常是你的IPv6路由器的地址。</span></li>
</ul>
</li>
<li>
<p><span style="color: #000080;"><strong>設定DNS伺服器：</strong></span></p>
<ul>
<li><span style="color: #000080;">設定IPv6 DNS伺服器，用於解析主機名稱到IPv6地址。</span></li>
</ul>
</li>
<li>
<p><span style="color: #000080;"><strong>進行設定：</strong></span></p>
<ul>
<li><span style="color: #000080;">在Windows中，你可以透過「控制台」 &gt; 「網路和共用中心」 &gt; 「變更介面卡設定」，選擇適當的網路介面卡，然後在「Internet Protocol Version 6 (TCP/IPv6)」中輸入相應的資訊。</span></li>
<li><span style="color: #000080;">在Linux中，你可以編輯 <code>/etc/network/interfaces</code> 文件或使用 <code>ip</code> 和 <code>route</code> 指令進行設定。</span></li>
<li><span style="color: #000080;">在macOS中，你可以使用「系統偏好設定」 &gt; 「網路」，選擇你的連接方式，點選「進階」進行IPv6設定。</span></li>
</ul>
</li>
<li>
<p><span style="color: #000080;"><strong>測試連接：</strong></span></p>
<ul>
<li><span style="color: #000080;">確保所有設定正確，通過 <code>ping6</code> 指令或其他IPv6測試工具測試連接。</span></li>
</ul>
</li>
<li>
<p><span style="color: #000080;"><strong>監視和維護：</strong></span></p>
<ul>
<li><span style="color: #000080;">監視IPv6流量，確保沒有未授權的設備使用你的IPv6地址。</span></li>
<li><span style="color: #000080;">定期更新防火牆設定，確保IPv6網路的安全性。</span><span style="color: #000080;"></span></li>
</ul>
</li>
</ol>
<p></p>
<br/><br/><br/><br/><span style="color: #000080;"></span>特定設定操作
<p>我了解到 Replit、s.cycu.org 和 localhost 分別是三個不同情境下進行個人和分組倉庫設定操作的平台或環境。在這裡，我將提供一般性的指導，因為具體的設定可能取決於你使用的版本控制系統（例如Git）、編程語言和項目需求。</p>
<h2>Replit</h2>
<p>當在 Replit 上創建項目時，你可以進行個人和分組倉庫的相關設定。以下是詳細的步驟：</p>
<p><strong>創建項目:</strong></p>
<ol>
<li>登錄到 Replit。</li>
<li>點擊頁面右上角的 "Create" 按鈕，選擇創建一個新項目。</li>
</ol>
<p><strong>項目設置:</strong></p>
<ol start="3">
<li>在創建項目後，你會看到項目的主界面。在右上角可能有一個 "Settings" 或 "Project Settings" 按鈕，點擊它。</li>
</ol>
<p><strong>版本控制和倉庫設置:</strong></p>
<ol start="4">
<li>在項目設置中，你可能會找到與版本控制和倉庫相關的選項。</li>
<li>你可以選擇使用版本控制系統，通常是 Git。</li>
<li>設置遠程倉庫鏈接，可以選擇是 Replit 的倉庫還是連接到其他倉庫。</li>
</ol>
<p><strong>倉庫訪問權限:</strong></p>
<ol start="7">
<li>在設置中，你可能會找到有關倉庫訪問權限的選項。</li>
<li>你可以設置倉庫是私有還是公共的。私有倉庫只能被特定用戶或協作團隊訪問，而公共倉庫對所有人都是可見的。</li>
</ol>
<p><strong>協作:</strong></p>
<ol start="9">
<li>如果你是與其他人協作，你可能還會找到協作相關的選項。</li>
<li>可能有一些設置，允許其他用戶或團隊成員加入項目並共同編輯。</li>
</ol>
<h2><strong>S.cycu.org</strong></h2>
<p>s.cycu.org 是中原大學（CYCU）的一個平台，用於項目管理和版本控制。以下有操作方式，可有助於理解在 s.cycu.org 上進行項目設定的過程：</p>
<p><strong>登錄到 s.cycu.org 平台:</strong></p>
<ol>
<li>打開瀏覽器，並訪問 s.cycu.org。</li>
<li>使用你的中原大學學生或項目賬戶登錄。</li>
</ol>
<p><strong>進入項目或倉庫頁面:</strong></p>
<ol start="3">
<li>登錄後，你可能會看到你的儀表板或項目列表。找到你要進行設定的具體項目，然後點擊進入該項目頁面。</li>
</ol>
<p><strong>尋找設置或管理選項:</strong></p>
<ol start="4">
<li>在項目頁面，尋找類似 "Settings"、"項目設置" 或 "管理" 的選項。通常，這些選項位於頁面的頂部導航欄或頁面側邊欄。</li>
<li>如果你使用版本控制系統（例如Git），你可能會找到與倉庫設置和版本控制相關的選項。</li>
</ol>
<p><strong>版本控制和倉庫設置:</strong></p>
<ol start="6">
<li>在項目設置中，可能會有關於版本控制的設置，你可以設置遠程倉庫鏈接，配置分支策略等。</li>
<li>你可能需要提供版本控制系統的憑證（例如Git倉庫的URL）。</li>
</ol>
<p><strong>訪問權限:</strong></p>
<ol start="8">
<li>在設置中，尋找與訪問權限相關的選項。你可能可以設置項目是私有還是公開的，以及定義誰可以訪問和編輯項目。</li>
<li>確保按照項目需求進行正確的訪問權限設置。</li>
</ol>
<h2>Localhost</h2>
<p><span>在本地開發環境（localhost）進行倉庫設置通常涉及使用版本控制系統，例如Git。以下是一般的步驟，以使用進行解釋：</span></p>
<ol>
<li>
<p><strong>打開終端或命令行界面:</strong></p>
<ul>
<li>打開你的電腦上的終端機（Terminal）或命令行界面，這取決於你使用的操作系統。</li>
</ul>
</li>
<li>
<p><strong>導航到你的本地項目目錄:</strong></p>
<ul>
<li>使用 <code>cd</code> 命令（改變目錄）導航到你的本地項目目錄。例如：
<div class="bg-black rounded-md">
<div class="flex items-center relative text-gray-200 bg-gray-800 dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span>cd /path/to/your/project<br/></span></div>
</div>
<img alt="" height="29" src="/images/0001.png" width="200"/></li>
</ul>
</li>
<li>
<p><strong>使用命令行工具執行相關的倉庫設置:</strong></p>
<ul>
<li>如果尚未初始化 Git 倉庫，可以使用以下命令進行初始化：
<div class="bg-black rounded-md">
<div class="flex items-center relative text-gray-200 bg-gray-800 dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md">git init</div>
<div class="flex items-center relative text-gray-200 bg-gray-800 dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span><img alt="" height="32" src="/images/0002.png" width="200"/> </span></div>
</div>
</li>
<li>如果已有遠程倉庫，可以使用以下命令添加遠程倉庫地址：
<div class="bg-black rounded-md">
<div class="flex items-center relative text-gray-200 bg-gray-800 dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md">git remote add origin &lt;remote_repository_url&gt;</div>
<div class="flex items-center relative text-gray-200 bg-gray-800 dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><img alt="" height="28" src="/images/0003.png" width="200"/></div>
</div>
</li>
<li>如果需要配置使用者名稱和郵箱，可以使用以下命令：
<div class="bg-black rounded-md">
<div class="flex items-center relative text-gray-200 bg-gray-800 dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md">git config --global user.name "Your Name"<br/>git config --global user.email "your.email@example.com"</div>
<div class="flex items-center relative text-gray-200 bg-gray-800 dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span><img alt="" height="38" src="/images/0004.png" width="200"/></span></div>
</div>
</li>
<li>其他可能的設置包括分支管理、忽略文件等，可以使用相應的 Git 命令完成設置。</li>
</ul>
</li>
<li>
<p><strong>提交更改和推送到遠程倉庫:</strong></p>
<ul>
<li>使用以下命令將更改添加到本地倉庫：
<div class="bg-black rounded-md">
<div class="flex items-center relative text-gray-200 bg-gray-800 dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md">git add .<br/>git commit -m "Commit message"</div>
<div class="flex items-center relative text-gray-200 bg-gray-800 dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span><img alt="" height="38" src="/images/0005.png" width="200"/></span></div>
</div>
</li>
<li>如果是第一次推送，使用以下命令將更改推送到遠程倉庫：
<div class="bg-black rounded-md">
<div class="flex items-center relative text-gray-200 bg-gray-800 dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md">git push -u origin master</div>
<div class="flex items-center relative text-gray-200 bg-gray-800 dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span><img alt="" height="29" src="/images/00006.png" width="200"/></span></div>
</div>
</li>
<li>其中，<code>master</code> 可能是你當前的主分支，根據你的設置可能會有所不同。</li>
</ul>
</li>
</ol>
<p>這些是一般的步驟，具體的命令和設置可能會因項目需求、團隊規範或個人偏好而有所不同。確保你熟悉你所使用版本控制系統的命令和文檔，以確保正確地配置和管理你的本地倉庫。</p>
<p><br/><br/></p>
<h1>W6</h1>
<p><span>C 程式練習二:</span></p>
<p>1. 在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Go 類編譯方式執行.</p>
<p>2. 在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Compile 編譯連結後取得 a.out, 然後在命令列中以 a.out 執行.</p>
<p>3. 在 Replit 全球資訊網 IDE 環境中的 Shell 頁面, 以 cc ex1.c 產生可執行檔案 a.out, 並以 ./a.out 執行, 或者以 cc ex1.c -o ex1 指定編譯連結後的可執行檔案名稱為 ex1 後, 以 ./ex1 執行.</p>
<p>最後將所選擇的 C 程式範例執行過程與相關說明內容, 整理在<span>個人 github 帳號下的 cp2023 倉儲網頁</span>中的<span> </span><span>c_ex</span><span> </span>頁面</p>
<p><a href="https://mde.tw/cpnote/downloads/gnuplot_ex1.c">gnuplot_ex1.c</a> 原始碼如下:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;
  
// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }
  
    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);
  
    return 0;
}</pre>
<p><span>執行結果位於 images:</span></p>
<p style="top: 387.614px;"><img alt="" height="125" src="/images/gnuplot_ex1.png" width="250"/></p>
<p style="top: 387.614px;"></p>
<p>前述 Replit 平台環境中, 已經加入 Gnuplot 繪圖程式庫, 若循相同設定, 在 replit.nix 中加入 gd 繪圖程式庫以及 ncurses 終端機圖形介面程式庫, 則可結合 C/C++ 進行各式靜態與動態繪圖練習:</p>
<p>replit.nix</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">{ pkgs }: {
    deps = [
      pkgs.gnuplot
      pkgs.ncurses.dev
      pkgs.gd
    ];
}</pre>
<p>納入 ncurses 後的 C 程式編譯連結指令為: cc ncurses_ex1.c -lncurses -lm</p>
<p>其中 -lncurses 會在連結階段導入所需的 ncurses 程式庫, 而 -lm 則導入 math.h 時連結數學程式庫之用.</p>
<p>至於納入 gd 繪圖程式庫後的編譯連結指令為: cc gd_ex1.c -lgd -lm</p>
<p>其中 -lgd 會在連結階段導入所需的 gd 程式庫, 而 -lm 則導入數學程式庫.</p>
<h1>W7</h1>
<p></p>
<p><span>gd 程式庫繪圖練習:</span></p>
<p><span><a href="/downloads/gd_roc.c">gd_roc.c</a> 程式碼</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
    // width 3: height 2
    int width = 1200;
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./../images/roc_flag1.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    int sun_radius = (int)(width/8);
    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue
    // red rectangle area
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    // blue rectangle area
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
   
    draw_white_sun(img, center_x, center_y, sun_radius, white);
}

void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
    float angle = 0;
    int fromX, fromY;
    int toX, toY;
    for (int i=0; i&lt;24; i++){
        angle += 5*M_PI*2/12;
        //printf("%.3f", angle);
        toX = center_x + cos(angle)*sun_radius;
        toY = center_y + sin(angle)*sun_radius;
        
        if (i!=0){
            gdImageLine(img, fromX, fromY, toX, toY, color);
        }
        fromX = toX;
        fromY = toY;
   }
}</pre>
<p><img alt="" height="200" src="/images/roc_flag_in_gd.png" width="300"/></p>
<p>******************************************************</p>
<p></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

int main() {
    int width = 800;
    int height = (int)(width / 1.9);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_usa_flag(img);

    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);

    return 0;
}

void draw_usa_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // Colors for the flag
    red = gdImageColorAllocate(img, 178, 34, 52); // Red stripes
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 60, 59, 110); // Blue field

    int stripe_height = height / 13;
    int stripe_width = width;
    int star_size = (int)(0.0308 * height); // Corrected star size (half the original size)

    for (int y = 0; y &lt; height; y += stripe_height) {
        if (y / stripe_height % 2 == 0) {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
        } else {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
        }
    }

    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);

    int star_spacing_x = (int)(0.063 * height); // Horizontal spacing between stars
    int star_spacing_y = (int)(0.054 * height); // Vertical spacing between stars
    int star_start_x = (int)(0.0616 * height); // Starting X position for stars
    int star_start_y = (int)(0.0485 * height); // Starting Y position for stars

    for (int row = 0; row &lt; 9; row++) {
        int starsPerRow = (row % 2 == 0) ? 6 : 5;

        for (int star = 0; star &lt; starsPerRow; star++) {
            int x = star_start_x + star * star_spacing_x;
            int y = star_start_y + row * star_spacing_y;
            draw_star(img, x, y, star_size, white);
        }
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color) {
    gdPoint points[10];

    for (int i = 0; i &lt; 10; i++) {
        double angle = M_PI / 2 + i * 2 * M_PI / 10;
        int radius = (i % 2 == 0) ? size : size / 2;
        points[i].x = x + radius * cos(angle);
        points[i].y = y + radius * sin(angle);
    }

    // Fill the star with white color
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><img alt="" height="149" src="/images/usa.png" width="250"/><br/><br/><br/>利用<span>C 與 gnuplot 及 gd 繪圖程式庫的結合以</span>生成台灣國旗以及美國國旗</p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>